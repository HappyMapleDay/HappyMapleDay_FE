---
alwaysApply: true
---
커밋 메세지는 `태그: 내용` 의 형태로 이루어져 있으며, `콜론(:)` 뒤에 스페이스가 있음을 잊지 말것!
---

### 태그 종류

| feat | 새로운 기능을 추가 |
| --- | --- |
| fix | 오류나 버그를 수정 |
| env | 환경 설정을 추가 |
| refact | 코드 리팩토링 |
| docs | 코드는 손도 안대고 주석 등만 추가(기능 변경 X) |
| test | 테스트코드를 작성 |
| style | FE: 디자인 수정 |
| chore | 모르겠고 뭔가 애매할때 |

### 내용 작성하기
- 웬만하면 짧고 간결하게
- 특수기호 자제
- 변경사항을 한 눈에 알 수 있도록 작성

```java
메인 페이지 레이아웃 수정
수익 최적화 기능 추가
```

## 커밋 메세지 예시
```java
feat: 회원 가입 구현
```

## Branch
브랜치를 생성할 시 다음의 형식을 따른다.

```java
태그(feature, fix, refactor 등등)/{serviceName}-{작업내용}
```

태그는 커밋 메세지와는 다르게 'feature', 'service', 'refactor'등 풀네임으로 지칭한다.
serviceName은 service를 제하고 'user', 'character' 등 이름만 넣는다.

예를 들어, User-Service에서 사용자 인증 이슈(#2)를 처리하는 브랜치라면
feature/user-issue2-authentication
이런 식으로!

### 브랜치 생성

```java
git checkout -b {branchName}
```

### 브랜치에 푸시(원격에 브랜치를 만들고 처음 푸시할 때)

```java
git push origin -u {branchName}
```

## *브랜치를 파야할 상황엔 어떤 게 있을까?*

1. 뭔가 만들 때
2. 뭔가 해야 할 때
3. 뭔가 추가할 때
4. 뭔가 수정할 때

뭔가 큰 덩어리가 하나 끝났다? 새 브랜치 팔 준비.

뭔가 큰 덩어리를 시작 해야 한다? 새 브랜치 팔 준비.